package com.huo.data.dao;

import com.huo.data.ConnectionManager;
import com.huo.data.DataException;
import com.huo.data.DataSet;
import com.huo.data.DataTable;
import com.huo.data.TableCollection;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class Database {
	private static Log log = LogFactory.getLog(Database.class);	
	protected static ConnectionManager cm = ConnectionManager.getInstance();
	
	public static Connection getConnection()
		    throws SQLException
		  {
		    Connection conn = cm.getConnection();
		    conn.setAutoCommit(false);
		    
		    return conn;
		  }
		  
		  public static void rollback(Connection conn)
		    throws SQLException
		  {
		    conn.rollback();
		  }
		  
		  public static void commit(Connection conn)
		    throws SQLException
		  {
		    conn.commit();
		  }
		  
		  public static String getObjectFullName(String objectName)
		  {
		    if ((ConnectionManager.owner.isEmpty()) || (objectName.contains("."))) {
		      return objectName;
		    }
		    return ConnectionManager.owner + "." + objectName;
		  }
		  
		  protected static void setParameter(PreparedStatement statement, Parameter... params)
		    throws SQLException
		  {
		    if (params.length == 0) {
		      return;
		    }
		    for (int i = 0; i < params.length; i++)
		    {
		      if (params[i].direction != ParameterDirection.IN) {
		        throw new SQLException("Not contain parameters of type OUT.");
		      }
		      statement.setObject(i + 1, params[i].value);
		    }
		  }
		  
		  protected static void setParameter(CallableStatement statement, Parameter... params)
		    throws SQLException
		  {
		    if (params.length == 0) {
		      return;
		    }
		    for (int i = 0; i < params.length; i++)
		    {
		      if ((params[i].direction == ParameterDirection.OUT) || 
		        (params[i].direction == ParameterDirection.INOUT)) {
		        statement.registerOutParameter(i + 1, params[i].type);
		      }
		      if ((params[i].direction == ParameterDirection.IN) || 
		        (params[i].direction == ParameterDirection.INOUT)) {
		        statement.setObject(i + 1, params[i].value);
		      }
		    }
		  }
		  
		  protected static void setParameter(CallableStatement statement, Parameter returnParameter, Parameter... params)
		    throws SQLException
		  {
		    if ((returnParameter == null) || 
		      (returnParameter.direction != ParameterDirection.RETURN)) {
		      throw new SQLException(
		        "The returnParameter can not be null, and return type must be.");
		    }
		    statement.registerOutParameter(1, returnParameter.type);
		    if (params.length == 0) {
		      return;
		    }
		    for (int i = 0; i < params.length; i++)
		    {
		      if ((params[i].direction == ParameterDirection.OUT) || 
		        (params[i].direction == ParameterDirection.INOUT)) {
		        statement.registerOutParameter(i + 2, params[i].type);
		      }
		      if ((params[i].direction == ParameterDirection.IN) || 
		        (params[i].direction == ParameterDirection.INOUT)) {
		        statement.setObject(i + 2, params[i].value);
		      }
		    }
		  }
		  
		  protected static void fillOutParameterValues(CallableStatement statement, List<Object> outParameterValues, int offset, Parameter... params)
		    throws SQLException, DataException
		  {
		    if ((outParameterValues == null) || (params.length == 0)) {
		      return;
		    }
		    for (int i = 0; i < params.length; i++) {
		      if ((params[i].direction == ParameterDirection.OUT) || 
		        (params[i].direction == ParameterDirection.INOUT)) {
		        outParameterValues.add(statement.getObject(i + offset));
		      }
		    }
		  }
		  
		  public static long executeNonQuery(Connection conn, String command, Parameter... params)
		    throws SQLException
		  {
		    PreparedStatement statement = null;
		    if (ConnectionManager.outputStatementToLogger) {
		      log.info("�������������������� " + command + ", ������ " + (params == null ? 0 : params.length) + " ��������");
		    }
		    try
		    {
		      statement = conn.prepareStatement(command, 
		        1);  //PreparedStatement prepareStatement( String sql, int autoGeneratedKeys)
		    }
		    catch (SQLException e)
		    {
		      statement = conn.prepareStatement(command);
		    }
		    setParameter(statement, params);
		    
		    long result = statement.executeUpdate(); //返回执行成功的条数
		    try
		    {
		      ResultSet rs = statement.getGeneratedKeys();
		      if ((rs != null) && (rs.next())) {
		        result = rs.getLong(1); //获取插入后的主键
		      }
		    }
		    catch (Exception localException) {}
		    statement.close();
		    
		    return result;
		  }
		  
		  public static DataSet executeQuery(Connection conn, String command, Parameter... params)
		    throws SQLException, DataException
		  {
		    PreparedStatement statement = conn.prepareStatement(command);
		    setParameter(statement, params);
		    if (ConnectionManager.outputStatementToLogger) {
		      log.info("�������������������� " + command + ", ������ " + (params == null ? 0 : params.length) + " ��������");
		    }
		    ResultSet rs = statement.executeQuery();
		    DataSet ds = new DataSet();
		    ds.parseResultSet(rs);
		    
		    rs.close();
		    statement.close();
		    
		    return ds;
		  }
		  
		  public static Object executeScalar(Connection conn, String command, Parameter... params)
		    throws SQLException
		  {
		    PreparedStatement statement = conn.prepareStatement(command);
		    setParameter(statement, params);
		    if (ConnectionManager.outputStatementToLogger) {
		      log.info("�������������������� " + command + ", ������ " + (params == null ? 0 : params.length) + " ��������");
		    }
		    ResultSet rs = statement.executeQuery();
		    
		    Object object = null;
		    if (rs.next()) {
		      object = rs.getObject(1);
		    }
		    rs.close();
		    statement.close();
		    
		    return object;
		  }
		  
		  public static Object executeFunction(Connection conn, String FunctionName, Parameter returnParameter, Parameter... params)
		    throws SQLException
		  {
		    String command = "{ ? = call " + getObjectFullName(FunctionName) + "(";
		    for (int i = 0; i < params.length; i++) {
		      command = command + (i > 0 ? ", ?" : "?");
		    }
		    command = command + ") }";
		    if (ConnectionManager.outputStatementToLogger) {
		      log.info("�������������������� " + command + ", ������ " + (params == null ? 0 : params.length) + " ��������");
		    }
		    CallableStatement statement = conn.prepareCall(command);
		    setParameter(statement, returnParameter, params);
		    statement.execute();
		    Object object = statement.getObject(1);
		    statement.close();
		    
		    return object;
		  }
		  
		  public static int executeProcedure(Connection conn, String ProcedureName, DataSet ds, List<Object> outParameterValues, Parameter... params)
		    throws SQLException, DataException
		  {
		    String command = "{ call " + getObjectFullName(ProcedureName) + "(";
		    for (int i = 0; i < params.length; i++) {
		      command = command + (i > 0 ? ", ?" : "?");
		    }
		    command = command + ") }";
		    if (ConnectionManager.outputStatementToLogger) {
		      log.info("�������������������� " + command + ", ������ " + (params == null ? 0 : params.length) + " ��������");
		    }
		    CallableStatement statement = conn.prepareCall(command);
		    setParameter(statement, params);
		    statement.execute();
		    if (ds != null)
		    {
		      ResultSet rs = null;
		      do
		      {
		        rs = statement.getResultSet();
		        if (rs == null) {
		          break;
		        }
		        DataTable dt = new DataTable();
		        dt.parseResultSet(rs);
		        ds.tables.add(dt);
		      } while (statement.getMoreResults());
		      if (rs != null) {
		        rs.close();
		      }
		    }
		    fillOutParameterValues(statement, outParameterValues, 1, params);
		    statement.close();
		    
		    return 0;
		  }
	
}
